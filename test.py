# -*- coding: utf-8 -*-
"""KT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fMuGoLO8N8JYRMW5qD3VfJyAFyImtDoJ
"""

!pip install xgboost
!pip install lightgbm
!pip install catboost

!pip install pycaret

"""## * 새로고침 한번 해줘야합니다."""

from pycaret.classification import *

import pickle
import zipfile
import time
import os
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

#from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split

# 데이터 파일 폴더를 보기 위해 구글드라이브 연결합니다

from google.colab import drive
drive.mount('/content/drive')

# data, result 폴더생성 후 data안에 압축을 풉니다

folder = ['/content/data', '/content/result']

for path in folder:
    os.mkdir(path)


zipfile.ZipFile('/content/drive/MyDrive/[과제2] 예선데이터 및 자료(9 13~9 18)/new_dataset_round1.zip').extractall('/content/data')

ck = pd.read_csv('/content/data/round1_train.csv',
                 usecols=['시각', 'DSP ID', '광고 응답 광고주 도메인','국가코드 ID', '매체 ID', '사이즈 ID', 'ADID 타입',
                          '플랫폼', 'OS 종류', 'P1', 'P2', 'P3', 'P4', '환율', 'winning'],
                 chunksize=1000000)
train = pd.concat(ck)
test = pd.read_csv('/content/data/round1_test.csv')

import pickle

with open('train.csv', 'wb') as f:
    pickle.dump(train, f)

with open('train.csv', 'rb') as f:
    data = pickle.load(f)

train['time'] = pd.to_datetime(train['시각'], format='%Y%m%d%H%M%S')
train['week'] = train['time'].dt.dayofweek
train['hour'] = train['time'].dt.hour

train.drop(['시각', 'time'], axis=1, inplace=True)

test['time'] = pd.to_datetime(test['시각'], format='%Y%m%d%H%M%S')
test['week'] = test['time'].dt.dayofweek
test['hour'] = test['time'].dt.hour

test.drop(['시각', 'time'], axis=1, inplace=True)

#train.drop(['국가코드 ID','WUID (웹 유저 ID)','시각','광고 응답 광고주 도메인', '애드유닛 ID',
#            '노출 ID','SSP 입찰ID','DSP 입찰ID','AX 낙찰ID', 'ADID','OS 버전 ID','P5'], axis=1, inplace=True)

#test.drop(['국가코드 ID','WUID (웹 유저 ID)','시각','광고 응답 광고주 도메인', '애드유닛 ID',
#            '노출 ID','SSP 입찰ID','DSP 입찰ID','AX 낙찰ID', 'ADID','OS 버전 ID', 'Bid Index'], axis=1, inplace=True)

train['광고 응답 광고주 도메인'] = train['광고 응답 광고주 도메인'].fillna(train['광고 응답 광고주 도메인'].value_counts().head(1).index[0])
test['광고 응답 광고주 도메인'] = test['광고 응답 광고주 도메인'].fillna(train['광고 응답 광고주 도메인'].value_counts().head(1).index[0])

train['국가코드 ID']= train['국가코드 ID'].fillna(train['국가코드 ID'].value_counts().head(1).index[0])
test['국가코드 ID']= test['국가코드 ID'].fillna(train['국가코드 ID'].value_counts().head(1).index[0])

dummy_id = list(train['매체 ID'].value_counts().head(7).index)
dummy_DSP = list(train['DSP ID'].value_counts().index)
dummy_ad = list(train['광고 응답 광고주 도메인'].value_counts().head(7).index)
dummy_nation = list(train['국가코드 ID'].value_counts().head(1).index)

#dummy_id_test = list(test['매체 ID'].value_counts().head(20).index)
#dummy_DSP_test = list(test['DSP ID'].value_counts().index)

def dummy_train_id(x):
    if x not in dummy_id:
        x = 'etc'
    return x

def dummy_train_DSP(x):
    if x not in dummy_DSP:
        x = 'etc'
    return x

def dummy_test_id(x):
    if x not in dummy_id_test:
        x = 'etc'
    return x

def dummy_test_DSP(x):
    if x not in dummy_DSP_test:
        x = 'etc'
    return x

def dummy_train_ad(x):
    if x not in dummy_ad:
        x = 'etc'
    return x

def dummy_nation_tr(x):
    if x not in dummy_nation:
        x = 'etc'
    else:
        x = '1012'
    return x

train['매체 ID'] = train['매체 ID'].map(dummy_train_id)
train['DSP ID'] = train['DSP ID'].map(dummy_train_DSP)
train['광고 응답 광고주 도메인'] = train['광고 응답 광고주 도메인'].map(dummy_train_ad)
train['국가코드 ID'] = train['국가코드 ID'].map(dummy_nation_tr)

test['매체 ID'] = test['매체 ID'].map(dummy_train_id)
test['DSP ID'] = test['DSP ID'].map(dummy_train_DSP)
test['광고 응답 광고주 도메인'] = test['광고 응답 광고주 도메인'].map(dummy_train_ad)
test['국가코드 ID'] = test['국가코드 ID'].map(dummy_nation_tr)

def dummy_week(x):
    if 0 <= x <= 4:
        x = '평일'
    else:
        x = '주말'
    return x

def dummy_hour(x):
    if 0 <= x <= 6:
        x = '새벽'
    elif 7 <= x <= 12:
        x = '오전'
    elif 13 <= x <= 18:
        x = '오후'
    else:
        x = '밤'
    return x

train['week'] = train['week'].astype('int')
train['week'] = train['week'].map(dummy_week)

train['hour'] = train['hour'].astype('int')
train['hour'] = train['hour'].map(dummy_hour)

test['week'] = test['week'].astype('int')
test['week'] = test['week'].map(dummy_week)

test['hour'] = test['hour'].astype('int')
test['hour'] = test['hour'].map(dummy_hour)

dummy_train = pd.get_dummies(train, columns = ['매체 ID','DSP ID','OS 종류','플랫폼',
                                               '사이즈 ID','ADID 타입','광고 응답 광고주 도메인','week','hour','국가코드 ID','환율'])
dummy_test = pd.get_dummies(test, columns = ['매체 ID','DSP ID','OS 종류','플랫폼',
                                             '사이즈 ID','ADID 타입','광고 응답 광고주 도메인','week','hour','국가코드 ID','환율'])

name_train = []
for i,j in enumerate(dummy_id):
    name_train.append([i,j])

name_test = []
for i,j in enumerate(dummy_id):
    name_test.append([i,j])

for i,j in name_train:
    if j in dummy_id:
        dummy_train.rename(columns={f'매체 ID_{j}' : f'매체_id{i}'}, inplace = True)
            #dummy_train.rename(columns={i : f'매체_id{j}'})

for i,j in name_test:
    if j in dummy_id:
        dummy_test.rename(columns={f'매체 ID_{j}' : f'매체_id{i}'}, inplace = True)
            #dummy_train.rename(columns={i : f'매체_id{j}'})

sample_train = dummy_train.sample(n=3000000,replace=False, random_state=2022)

clf = setup(data = dummy_train, target = 'winning', silent = True,
            use_gpu = True, session_id=42)

#from pandas.core.common import random_state
total_models = []

model_lgbm = create_model('dt', fold = 5 ,random_state=42,)
#total_models.append(model_gbc)



plot_model(model_lgbm, plot='feature', )

tuned_lgb= tune_model(model_lgbm, n_iter=5)

top5 = compare_models(sort='Accuracy', n_select=1)

model_catboost = tune_model(model_lgbm, fold=3, optimize = 'AUC', choose_better = True)

final_model = finalize_model(model_catboost, )

prediction = predict_model(model_gbc, data = dummy_test)
prediction.head()

test.head()

from sklearn.metrics import accuracy_score

accuracy_score()



x = dummy_train.drop('winning', axis=1)
y = dummy_train['winning']

x_train, x_test, y_train, y_test = train_test_split(x,y, train_size=0.7, random_state=42)



x_train[:10000]

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
rf = RandomForestClassifier()
rf.fit(x_train[:100000], y_train[:100000])
rf.score(x_test, y_test)